gpsAccuracy=1,
weightedModel=F
)
propUncert_weighted <- classificationAccuracy_propagateUncertainty(
gtShp = simPatches$gtRemSensJoin,#[, c("gtID", "gtPoints", "gtPatchID", "gtPatchType")],
remSensShp = simPatches$remSensPoly,
matchMethod="randomPoints",
gtSampleID="gtID",
gtPatch="gtPatchType", # Keep this for point_layer
remSensSampleID="remSensID",
remSensPatch="remSensPatchType", # Adjusted for polygon_layer
nDraws = 100,
nReclass=100,
gpsAccuracy=1,
weightedModel=T
)
summarizeAreas(propUncert_subset$remSensPropUncert, sumPlot=TRUE, areaField="gridArea_remSenShp",
remSensShp=simPatches$remSensPoly,
remSensPatchField="remSensPatchType", remSensAreaField="gridArea")
summarizeAreas(propUncert_rand$remSensPropUncert, sumPlot=TRUE, areaField="gridArea_remSenShp",
remSensShp=simPatches$remSensPoly,
remSensPatchField="remSensPatchType", remSensAreaField="gridArea")
summarizeAreas(propUncert_weighted$remSensPropUncert, sumPlot=TRUE, areaField="gridArea_remSenShp",
remSensShp=simPatches$remSensPoly,
remSensPatchField="remSensPatchType", remSensAreaField="gridArea")
propUncert_subset <- classificationAccuracy_propagateUncertainty(
gtShp = simPatches$gtRemSensJoin,#[, c("gtID", "gtPoints", "gtPatchID", "gtPatchType")],
remSensShp = simPatches$remSensPoly,
matchMethod="bufferedSubset",
gtSampleID="gtID",
gtPatch="gtPatchType", # Keep this for point_layer
remSensSampleID="remSensID",
remSensPatch="remSensPatchType", # Adjusted for polygon_layer
nDraws = 20,
nReclass=100,
gpsAccuracy=0.1,
weightedModel=F
)
propUncert_rand <- classificationAccuracy_propagateUncertainty(
gtShp = simPatches$gtRemSensJoin,#[, c("gtID", "gtPoints", "gtPatchID", "gtPatchType")],
remSensShp = simPatches$remSensPoly,
matchMethod="randomPoints",
gtSampleID="gtID",
gtPatch="gtPatchType", # Keep this for point_layer
remSensSampleID="remSensID",
remSensPatch="remSensPatchType", # Adjusted for polygon_layer
nDraws = 100,
nReclass=100,
gpsAccuracy=0.1,
weightedModel=F
)
propUncert_weighted <- classificationAccuracy_propagateUncertainty(
gtShp = simPatches$gtRemSensJoin,#[, c("gtID", "gtPoints", "gtPatchID", "gtPatchType")],
remSensShp = simPatches$remSensPoly,
matchMethod="randomPoints",
gtSampleID="gtID",
gtPatch="gtPatchType", # Keep this for point_layer
remSensSampleID="remSensID",
remSensPatch="remSensPatchType", # Adjusted for polygon_layer
nDraws = 100,
nReclass=100,
gpsAccuracy=0.1,
weightedModel=T
)
summarizeAreas(propUncert_subset$remSensPropUncert, sumPlot=TRUE, areaField="gridArea_remSenShp",
remSensShp=simPatches$remSensPoly,
remSensPatchField="remSensPatchType", remSensAreaField="gridArea")
summarizeAreas(propUncert_rand$remSensPropUncert, sumPlot=TRUE, areaField="gridArea_remSenShp",
remSensShp=simPatches$remSensPoly,
remSensPatchField="remSensPatchType", remSensAreaField="gridArea")
summarizeAreas(propUncert_weighted$remSensPropUncert, sumPlot=TRUE, areaField="gridArea_remSenShp",
remSensShp=simPatches$remSensPoly,
remSensPatchField="remSensPatchType", remSensAreaField="gridArea")
library(data.table)
baitCompSamps <- fread(C:\\Users\\jlfischer\\OneDrive - DOI\\Desktop\\myDocs\\nativeSppDatabase\\minnowTrapBaitComparisonSamples.csv)
baitCompSamps <- fread("C:\\Users\\jlfischer\\OneDrive - DOI\\Desktop\\myDocs\\nativeSppDatabase\\minnowTrapBaitComparisonSamples.csv")
fishDat <- fread("C:/Users/jlfischer/OneDrive - DOI/Desktop/myDocs/researchProjects/gearAndMonitoringAssessment/data/natSpp_fishData_2020Sep11.csv")
str(fishDat)
mtFish <- fishDat[str_SAMPLE_ID %in% baitCompSamps$str_SAMPLE_ID]
merge(baitCompSamps, mtFish, by="str_SAMPLE_ID")
dim(baitCompSamps)
mtSampFish <- merge(baitCompSamps, mtFish, by="str_SAMPLE_ID")
length(unique(mtSampFish$str_SAMPLE_ID))
write.csv(mtSampFish, "C:\Users\jlfischer\OneDrive - DOI\Desktop\myDocs\researchProjects\baitComparison\mtBaitComp.csv")
write.csv(mtSampFish, "C:\\Users\\jlfischer\\OneDrive - DOI\\Desktop\\myDocs\\researchProjects\\baitComparison\\mtBaitComp.csv")
library(ggplot2)
View(baitCompSamps)
mtSampFish
mtSampFish[, .N, by=list(str_SPECIES, str_BAIT_TYPE)]
sppCounts <- mtSampFish[, .N, by=list(str_SPECIES, str_BAIT_TYPE)]
sampCount <- mtSampFish[, .N, by=str_BAIT_TYPE]
sampCount
unique(mtSampFish[, .(str_BAIT_TYPE, str_SAMPLE_ID)])
unique(mtSampFish[, .(str_BAIT_TYPE, str_SAMPLE_ID)])[, .N, by=str_BAIT_TYPE]
sampCount <- unique(mtSampFish[, .(str_BAIT_TYPE, str_SAMPLE_ID)])[, .N, by=str_BAIT_TYPE]
mtSampFish[, str_BAIT_TYPE2 := ifelse(str_BAIT_TYPE=="NONE", "NO BAIT", str_BAIT_TYPE)]
sampCount <- unique(mtSampFish[, .(str_BAIT_TYPE, str_SAMPLE_ID)])[, .N, by=str_BAIT_TYPE]
sampCount
unique(mtSampFish[, .(str_BAIT_TYPE2, str_SAMPLE_ID)])[, .N, by=str_BAIT_TYPE2]
sampCount <- unique(mtSampFish[, .(str_BAIT_TYPE2, str_SAMPLE_ID)])[, .N, by=str_BAIT_TYPE2]
sppCounts <- mtSampFish[, .N, by=list(str_SPECIES, str_BAIT_TYPE2)]
sppCounts
ggplot(sppCounts, aes(y=N, x=str_BAIT_TYPE2)) +
geom_bar() +
facet_wrap(~str_SPECIES)
ggplot(sppCounts, aes(y=N, x=str_BAIT_TYPE2)) +
geom_point() +
facet_wrap(~str_SPECIES)
sppCounts <- mtSampFish[, .N, by=list(str_SPECIES, str_BAIT_TYPE2, str_SAMPLE_ID)]
ggplot(sppCounts, aes(y=N, x=str_BAIT_TYPE2)) +
geom_boxplot() +
facet_wrap(~str_SPECIES)
ggplot(sppCounts, aes(y=log(N), x=str_BAIT_TYPE2)) +
geom_boxplot() +
facet_wrap(~str_SPECIES)
ggplot(sppCounts, aes(y=log(N), x=str_BAIT_TYPE2)) +
geom_violin() +
facet_wrap(~str_SPECIES)
ggplot(sppCounts, aes(y=log(N), x=str_BAIT_TYPE2)) +
geom_violin() +
geom_point() +
facet_wrap(~str_SPECIES)
?geom_point
ggplot(sppCounts, aes(y=log(N), x=str_BAIT_TYPE2)) +
geom_violin() +
geom_point(position_jitter()) +
facet_wrap(~str_SPECIES)
ggplot(sppCounts, aes(y=log(N), x=str_BAIT_TYPE2)) +
geom_violin() +
geom_point(position=position_jitter()) +
facet_wrap(~str_SPECIES)
ggplot(sppCounts, aes(y=N, x=str_BAIT_TYPE2)) +
geom_boxplot() +
facet_wrap(~str_SPECIES)
ggplot(sppCounts, aes(y=log(N), x=str_BAIT_TYPE2)) +
geom_boxplot() +
facet_wrap(~str_SPECIES)
mtSampFish
View(mtSampFish)
#add in the zeros
expand.grid(unique(mtSampFish$str_SAMPLE_ID), unique(mtSampFish$str_BAIT_TYPE2), unique(mtSampFish$str_SPECIES))
#add in the zeros
expand.grid(unique(mtSampFish$str_SAMPLE_ID), unique(mtSampFish$str_BAIT_TYPE2), unique(mtSampFish$str_SPECIES))
#add in the zeros
zeros <- expand.grid(unique(mtSampFish$str_SAMPLE_ID), unique(mtSampFish$str_BAIT_TYPE2), unique(mtSampFish$str_SPECIES), Count=0)
#add in the zeros
zeros <- expand.grid(unique(mtSampFish$str_SAMPLE_ID), unique(mtSampFish$str_BAIT_TYPE2), unique(mtSampFish$str_SPECIES), Count=0)
mtSampFish[, Count := 1]
rbind(mtSampFish[, .(str_SPECIES, str_BAIT_TYPE2, str_SAMPLE_ID, Count)], zeros)
mtSampFish[, .(str_SPECIES, str_BAIT_TYPE2, str_SAMPLE_ID, Count)]
zeros
rbind(mtSampFish[, .(str_SPECIES, str_BAIT_TYPE2, str_SAMPLE_ID, Count)], zeros)
#add in the zeros
zeros <- expand.grid(mtSampFish$str_SAMPLE_ID=unique(mtSampFish$str_SAMPLE_ID), str_BAIT_TYPE2=unique(mtSampFish$str_BAIT_TYPE2), str_SPECIES=unique(mtSampFish$str_SPECIES), Count=0)
#add in the zeros
zeros <- expand.grid(str_SAMPLE_ID=unique(mtSampFish$str_SAMPLE_ID), str_BAIT_TYPE2=unique(mtSampFish$str_BAIT_TYPE2), str_SPECIES=unique(mtSampFish$str_SPECIES), Count=0)
mtSampFish[, Count := 1]
rbind(mtSampFish[, .(str_SPECIES, str_BAIT_TYPE2, str_SAMPLE_ID, Count)], zeros)
zeros <- expand.grid(str_SAMPLE_ID=unique(mtSampFish$str_SAMPLE_ID), str_BAIT_TYPE2=unique(mtSampFish$str_BAIT_TYPE2), str_SPECIES=unique(mtSampFish$str_SPECIES), Count=0)
mtSampFish[, Count := 1]
mtSampFish_zeros <- rbind(mtSampFish[, .(str_SPECIES, str_BAIT_TYPE2, str_SAMPLE_ID, Count)], zeros)
baitCompSamps <- fread("C:\\Users\\jlfischer\\OneDrive - DOI\\Desktop\\myDocs\\nativeSppDatabase\\minnowTrapBaitComparisonSamples.csv")
mtSampFish_sums <- mtSampFish_zeros[, list(Count=sum(Count)), by=list(str_SPECIES, str_BAIT_TYPE2, str_SAMPLE_ID)]
merge(baitCompSamps, mtSampFish_sums, by="str_SAMPLE_ID")
mtSampFish_counts <- merge(baitCompSamps, mtSampFish_sums, by="str_SAMPLE_ID")
write.csv(mtSampFish_counts, "C:\\Users\\jlfischer\\OneDrive - DOI\\Desktop\\myDocs\\researchProjects\\baitComparison\\mtSampFish_counts.csv")
length(mtSampFish_counts[Count==0])
mtSampFish_counts
mtSampFish_counts <- merge(baitCompSamps[!str_SPECIES=="NO FISH"], mtSampFish_sums, by="str_SAMPLE_ID")
mtSampFish_counts <- merge(baitCompSamps, mtSampFish_sums[!str_SPECIES=="NO FISH"], by="str_SAMPLE_ID")
write.csv(mtSampFish_counts, "C:\\Users\\jlfischer\\OneDrive - DOI\\Desktop\\myDocs\\researchProjects\\baitComparison\\mtSampFish_counts.csv")
mtSampFish_sums
mtSampFish_sums$Count==0
mean(mtSampFish_sums$Count==0)
sum(mtSampFish_sums$Count==0)
sum(mtSampFish_counts$Count==0)
write.csv(mtSampFish_counts, "C:\\Users\\jlfischer\\OneDrive - DOI\\Desktop\\myDocs\\researchProjects\\baitComparison\\mtSampFish_counts.csv")
hist(rpois(1000, 4))
hist(rpois(1000, 40))
hist(rnbinom(1000, mu=40, size=1))
sppR <- data.table(spp=paste0("spp", 1:nSpp))
library(data.table)
nSpp <- 57
nSamps <- 2
lpEst <- function(R, C, m){
N <- (m*C)/R
varN <- ((m+1)* (C+1)* (M-R)* (C-R))/((R+1)^2 * (R+2))
l95 <- N - sqrt(varN)*1.965
u95 <- N + sqrt(varN)*1.965
return(data.frame(N=N, sd=sqrt(varN), l95=l95, u95=u95))
}
sppR <- data.table(spp=paste0("spp", 1:nSpp))
sppR
data.table(spp=paste0("spp", 1:nSpp), nInd=rnbinom(nSpp, mu=40, size=1))
dt <- data.table(fact = c("a", "b", "c"), count = c(1, 2, 3))
dt[rep(seq(1, nrow(dt)), dt$count)]
rep(seq(1, nrow(dt)), dt$count)
rep(seq(1, nrow(sppR)), sppR$nInd)
sppR <- data.table(spp=paste0("spp", 1:nSpp), nInd=rnbinom(nSpp, mu=40, size=1))
rep(seq(1, nrow(sppR)), sppR$nInd)
sppR[rep(seq(1, nrow(sppR)), sppR$nInd)]
sppR[rep(seq(1, nrow(sppR)), sppR$nInd)][, .N, by=spp]
sppR_exp <- sppR[rep(seq(1, nrow(sppR)), sppR$nInd)]
rnbinom(1, mu=10, size=1)
rnbinom(1, mu=10, size=1)
rnbinom(1, mu=20, size=1)
rnbinom(1, mu=20, size=1)
catch1 <- sample(sppR_exp$spp, nCatch1, replace = FALSE)
nCatch1 <- rnbinom(1, mu=20, size=1)
nCatch2 <- rnbinom(1, mu=20, size=1)
catch1 <- sample(sppR_exp$spp, nCatch1, replace = FALSE)
catch2 <- sample(sppR_exp$spp, nCatch2, replace = FALSE)
lpEst <- function(catch1, catch2){
m <- unique(catch1)
C <- unique(catch2)
R <- sum(C %in% m)
return(c(m, C, R))
N <- (m*C)/R
varN <- ((m+1)* (C+1)* (M-R)* (C-R))/((R+1)^2 * (R+2))
l95 <- N - sqrt(varN)*1.965
u95 <- N + sqrt(varN)*1.965
return(data.frame(N=N, sd=sqrt(varN), l95=l95, u95=u95))
}
lpEst(catch1, catch2)
lpEst <- function(catch1, catch2){
m <- unique(catch1)
C <- unique(catch2)
R <- sum(C %in% m)
return(cbind(m, C, R))
N <- (m*C)/R
varN <- ((m+1)* (C+1)* (M-R)* (C-R))/((R+1)^2 * (R+2))
l95 <- N - sqrt(varN)*1.965
u95 <- N + sqrt(varN)*1.965
return(data.frame(N=N, sd=sqrt(varN), l95=l95, u95=u95))
}
lpEst(catch1, catch2)
lpEst <- function(catch1, catch2){
mCatch <- unique(catch1)
CCatch <- unique(catch2)
R <- sum(C %in% m)
m <- length(mCatch)
C <- length(CCatch)
N <- (m*C)/R
varN <- ((m+1)* (C+1)* (M-R)* (C-R))/((R+1)^2 * (R+2))
l95 <- N - sqrt(varN)*1.965
u95 <- N + sqrt(varN)*1.965
return(data.frame(N=N, sd=sqrt(varN), l95=l95, u95=u95))
}
lpEst(catch1, catch2)
lpEst <- function(catch1, catch2){
mCatch <- unique(catch1)
CCatch <- unique(catch2)
R <- sum(CCatch %in% mCatch)
m <- length(mCatch)
C <- length(CCatch)
N <- (m*C)/R
varN <- ((m+1)* (C+1)* (M-R)* (C-R))/((R+1)^2 * (R+2))
l95 <- N - sqrt(varN)*1.965
u95 <- N + sqrt(varN)*1.965
return(data.frame(N=N, sd=sqrt(varN), l95=l95, u95=u95))
}
lpEst(catch1, catch2)
lpEst <- function(catch1, catch2){
mCatch <- unique(catch1)
CCatch <- unique(catch2)
R <- sum(CCatch %in% mCatch)
m <- length(mCatch)
C <- length(CCatch)
N <- (m*C)/R
varN <- ((m+1)* (C+1)* (m-R)* (C-R))/((R+1)^2 * (R+2))
l95 <- N - sqrt(varN)*1.965
u95 <- N + sqrt(varN)*1.965
return(data.frame(N=N, sd=sqrt(varN), l95=l95, u95=u95))
}
lpEst(catch1, catch2)
sppR[, sum(nInd>0)]
nCatch1
nCatch2
rpois(1, mu=20, size=1)
rpois(1, 20)
nCatch1 <- rpois(1, 20)
nCatch2 <- rpois(1, 20)
catch1 <- sample(sppR_exp$spp, nCatch1, replace = FALSE)
catch2 <- sample(sppR_exp$spp, nCatch2, replace = FALSE)
lpEst(catch1, catch2)
sppR[, sum(nInd>0)]
nCatch1 <- rpois(1, 30)
nCatch2 <- rpois(1, 30)
catch1 <- sample(sppR_exp$spp, nCatch1, replace = FALSE)
catch2 <- sample(sppR_exp$spp, nCatch2, replace = FALSE)
lpEst(catch1, catch2)
sppR[, sum(nInd>0)]
nCatch1 <- rpois(1, 40)
nCatch2 <- rpois(1, 40)
catch1 <- sample(sppR_exp$spp, nCatch1, replace = FALSE)
catch2 <- sample(sppR_exp$spp, nCatch2, replace = FALSE)
lpEst(catch1, catch2)
sppR[, sum(nInd>0)]
nCatch1 <- rpois(1, 40)
nCatch2 <- rpois(1, 40)
catch1 <- sample(sppR_exp$spp, nCatch1, replace = FALSE)
catch2 <- sample(sppR_exp$spp, nCatch2, replace = FALSE)
lpEst(catch1, catch2)
sppR[, sum(nInd>0)]
nCatch1 <- rpois(1, 40)
nCatch2 <- rpois(1, 40)
catch1 <- sample(sppR_exp$spp, nCatch1, replace = FALSE)
catch2 <- sample(sppR_exp$spp, nCatch2, replace = FALSE)
lpEst(catch1, catch2)
sppR[, sum(nInd>0)]
nCatch1 <- rpois(1, 40)
nCatch2 <- rpois(1, 40)
catch1 <- sample(sppR_exp$spp, nCatch1, replace = FALSE)
catch2 <- sample(sppR_exp$spp, nCatch2, replace = FALSE)
lpEst(catch1, catch2)
sppR[, sum(nInd>0)]
nCatch1 <- rpois(1, 40)
nCatch2 <- rpois(1, 40)
catch1 <- sample(sppR_exp$spp, nCatch1, replace = FALSE)
catch2 <- sample(sppR_exp$spp, nCatch2, replace = FALSE)
lpEst(catch1, catch2)
sppR[, sum(nInd>0)]
nCatch1 <- rpois(1, 40)
nCatch2 <- rpois(1, 40)
catch1 <- sample(sppR_exp$spp, nCatch1, replace = FALSE)
catch2 <- sample(sppR_exp$spp, nCatch2, replace = FALSE)
lpEst(catch1, catch2)
sppR[, sum(nInd>0)]
nCatch1 <- rpois(1, 40)
nCatch2 <- rpois(1, 40)
catch1 <- sample(sppR_exp$spp, nCatch1, replace = FALSE)
catch2 <- sample(sppR_exp$spp, nCatch2, replace = FALSE)
lpEst(catch1, catch2)
sppR[, sum(nInd>0)]
nCatch1 <- rpois(1, 40)
nCatch2 <- rpois(1, 40)
catch1 <- sample(sppR_exp$spp, nCatch1, replace = FALSE)
catch2 <- sample(sppR_exp$spp, nCatch2, replace = FALSE)
lpEst(catch1, catch2)
sppR[, sum(nInd>0)]
nCatch1
nCatch2
nCatch1 <- rpois(1, 60)
nCatch2 <- rpois(1, 60)
catch1 <- sample(sppR_exp$spp, nCatch1, replace = FALSE)
catch2 <- sample(sppR_exp$spp, nCatch2, replace = FALSE)
lpEst(catch1, catch2)
sppR[, sum(nInd>0)]
nCatch1 <- rpois(1, 80)
nCatch2 <- rpois(1, 80)
catch1 <- sample(sppR_exp$spp, nCatch1, replace = FALSE)
catch2 <- sample(sppR_exp$spp, nCatch2, replace = FALSE)
lpEst(catch1, catch2)
sppR[, sum(nInd>0)]
nCatch1 <- rpois(1, 80)
nCatch2 <- rpois(1, 80)
catch1 <- sample(sppR_exp$spp, nCatch1, replace = FALSE)
catch2 <- sample(sppR_exp$spp, nCatch2, replace = FALSE)
lpEst(catch1, catch2)
sppR[, sum(nInd>0)]
nCatch1 <- rpois(1, 80)
nCatch2 <- rpois(1, 80)
catch1 <- sample(sppR_exp$spp, nCatch1, replace = FALSE)
catch2 <- sample(sppR_exp$spp, nCatch2, replace = FALSE)
lpEst(catch1, catch2)
sppR[, sum(nInd>0)]
nCatch1 <- rpois(1, 80)
nCatch2 <- rpois(1, 80)
catch1 <- sample(sppR_exp$spp, nCatch1, replace = FALSE)
catch2 <- sample(sppR_exp$spp, nCatch2, replace = FALSE)
lpEst(catch1, catch2)
sppR[, sum(nInd>0)]
nCatch1 <- rpois(1, 80)
nCatch2 <- rpois(1, 80)
catch1 <- sample(sppR_exp$spp, nCatch1, replace = FALSE)
catch2 <- sample(sppR_exp$spp, nCatch2, replace = FALSE)
lpEst(catch1, catch2)
sppR[, sum(nInd>0)]
nCatch1 <- rpois(1, 80)
nCatch2 <- rpois(1, 80)
catch1 <- sample(sppR_exp$spp, nCatch1, replace = FALSE)
catch2 <- sample(sppR_exp$spp, nCatch2, replace = FALSE)
lpEst(catch1, catch2)
sppR[, sum(nInd>0)]
nCatch1 <- rpois(1, 80)
nCatch2 <- rpois(1, 80)
catch1 <- sample(sppR_exp$spp, nCatch1, replace = FALSE)
catch2 <- sample(sppR_exp$spp, nCatch2, replace = FALSE)
lpEst(catch1, catch2)
sppR[, sum(nInd>0)]
nCatch1 <- rpois(1, 80)
nCatch2 <- rpois(1, 80)
catch1 <- sample(sppR_exp$spp, nCatch1, replace = FALSE)
catch2 <- sample(sppR_exp$spp, nCatch2, replace = FALSE)
lpEst(catch1, catch2)
sppR[, sum(nInd>0)]
nCatch1 <- rpois(1, 200)
nCatch2 <- rpois(1, 200)
catch1 <- sample(sppR_exp$spp, nCatch1, replace = FALSE)
catch2 <- sample(sppR_exp$spp, nCatch2, replace = FALSE)
lpEst(catch1, catch2)
sppR[, sum(nInd>0)]
nCatch1 <- rpois(1, 200)
nCatch2 <- rpois(1, 200)
catch1 <- sample(sppR_exp$spp, nCatch1, replace = FALSE)
catch2 <- sample(sppR_exp$spp, nCatch2, replace = FALSE)
lpEst(catch1, catch2)
sppR[, sum(nInd>0)]
nCatch1 <- rpois(1, 200)
nCatch2 <- rpois(1, 200)
catch1 <- sample(sppR_exp$spp, nCatch1, replace = FALSE)
catch2 <- sample(sppR_exp$spp, nCatch2, replace = FALSE)
lpEst(catch1, catch2)
sppR[, sum(nInd>0)]
nCatch1 <- rpois(1, 200)
nCatch2 <- rpois(1, 200)
catch1 <- sample(sppR_exp$spp, nCatch1, replace = FALSE)
catch2 <- sample(sppR_exp$spp, nCatch2, replace = FALSE)
lpEst(catch1, catch2)
sppR[, sum(nInd>0)]
nCatch1 <- rpois(1, 200)
nCatch2 <- rpois(1, 200)
catch1 <- sample(sppR_exp$spp, nCatch1, replace = FALSE)
catch2 <- sample(sppR_exp$spp, nCatch2, replace = FALSE)
lpEst(catch1, catch2)
sppR[, sum(nInd>0)]
nCatch1 <- rpois(1, 200)
nCatch2 <- rpois(1, 200)
catch1 <- sample(sppR_exp$spp, nCatch1, replace = FALSE)
catch2 <- sample(sppR_exp$spp, nCatch2, replace = FALSE)
lpEst(catch1, catch2)
sppR[, sum(nInd>0)]
nCatch1 <- rpois(1, 200)
nCatch2 <- rpois(1, 200)
catch1 <- sample(sppR_exp$spp, nCatch1, replace = FALSE)
catch2 <- sample(sppR_exp$spp, nCatch2, replace = FALSE)
lpEst(catch1, catch2)
sppR[, sum(nInd>0)]
nCatch1 <- rpois(1, 200)
nCatch2 <- rpois(1, 200)
catch1 <- sample(sppR_exp$spp, nCatch1, replace = FALSE)
catch2 <- sample(sppR_exp$spp, nCatch2, replace = FALSE)
lpEst(catch1, catch2)
sppR[, sum(nInd>0)]
nCatch1 <- rpois(1, 200)
nCatch2 <- rpois(1, 200)
catch1 <- sample(sppR_exp$spp, nCatch1, replace = FALSE)
catch2 <- sample(sppR_exp$spp, nCatch2, replace = FALSE)
lpEst(catch1, catch2)
sppR[, sum(nInd>0)]
nCatch1 <- rpois(1, 200)
nCatch2 <- rpois(1, 200)
catch1 <- sample(sppR_exp$spp, nCatch1, replace = FALSE)
catch2 <- sample(sppR_exp$spp, nCatch2, replace = FALSE)
lpEst(catch1, catch2)
sppR[, sum(nInd>0)]
nCatch1 <- rpois(1, 200)
nCatch2 <- rpois(1, 200)
catch1 <- sample(sppR_exp$spp, nCatch1, replace = FALSE)
catch2 <- sample(sppR_exp$spp, nCatch2, replace = FALSE)
lpEst(catch1, catch2)
sppR[, sum(nInd>0)]
nCatch1 <- rpois(1, 200)
nCatch2 <- rpois(1, 200)
catch1 <- sample(sppR_exp$spp, nCatch1, replace = FALSE)
catch2 <- sample(sppR_exp$spp, nCatch2, replace = FALSE)
lpEst(catch1, catch2)
sppR[, sum(nInd>0)]
install.packages("BAMMtools")
library(BAMMtools)
myDat <- c(153.6,
120.5,
112.7,
78.5,
64.7,
56.8,
55.0,
37.3,
33.4,
33.2,
32.7,
28.0,
19.7,
18.3,
17.4,
17.4,
16.5,
15.3,
11.7,
8.8,
8.8)
getJenksBreaks(myDat, k=3)
getJenksBreaks(myDat, k=4)
getJenksBreaks(myDat, k=5)
getJenksBreaks(myDat, k=6)
getJenksBreaks(myDat, k=7)
hist(runif(1000, 0, 1.64))
hist(runif(10000, 0, 1.64))
hist(logit(runif(10000, 0, 1.64)))
hist(arm::logit(runif(10000, 0, 1.64)))
hist(arm::logit(runif(10000, 0, 1)))
hist(arm::logit(runif(10000, 0, 1)))
hist(arm::invlogit(runif(10000, 0, 1.64)))
hist(arm::invlogit(runif(10000, 0, 1)))
devtools::install_github("USFWS/groundTruther", build_vignettes = T)
setwd("C:\\Users\\jlfischer\\OneDrive - DOI\\Desktop\\myDocs\\GitHub\\groundTruther")
devtools::document()
devtools::document()
devtools::load_all()
# devtools::install() #an alternative to load_all() see https://tinyheero.github.io/jekyll/update/2015/07/26/making-your-first-R-package.html
devtools::build() #build tar of package
devtools::install_local("C:/Users/jlfischer/OneDrive - DOI/Desktop/myDocs/researchProjects/sssClassificationUncertainty/code/groundTruther_0.0.0.9000.tar.gz", build_vignettes = TRUE)
