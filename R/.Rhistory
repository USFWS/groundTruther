#do nothing
} else {
gpsAccuracyField <- paste0(gpsAccuracyField, "_gt")
}
} else {
#do nothing
}
print(names(gtShp))
print(names(remSensShp))
print(gpsAccuracyField)
#set up env object for running data.table operations with objects defining field names
dtEnv <- list(gtSampleID=gtSampleID, gtPatch=gtPatch, remSensSampleID=remSensSampleID, remSensPatch=remSensPatch, gpsAccuracyField=gpsAccuracyField)
#ensure levels of gtPatch and remSensPatch match
stopifnot(class(gtShp[[gtPatch]])=="factor" | class(remSensShp[[remSensPatch]])=="factor")
#other checks
stopifnot(matchMethod %in% c("randomPoints", "bufferedSubset"))
#define remSensPatches to propagate uncertainty for
remSensPatchTypes <- levels(remSensShp[[remSensPatch]]) #note levels is used here instead of unique, because when remSensPatch is passed to the multinomial model, estimated classification probabilities are for each level in the data set
gtPatchTypes <- levels(droplevels(gtShp[[gtPatch]])) #drop unused levels, because multinom will drop unused levels
return(list(gtShp=gtShp,
remSensShp=remSensShp,
gtSampleID=gtSampleID,
gtSampleID=gtSampleID,
gtPatch=gtPatch,
remSensPatch=remSensPatch,
gpsAccuracyField=gpsAccuracyField)
)
if(matchMethod=="randomPoints"){
pointCloud_list <- locationPointCloud(gtShp=gtShp, remSensShp=remSensShp, crs=crs,
gtSampleID=gtSampleID, gtPatch=gtPatch, remSensPatch=remSensPatch,
nDraws=nDraws, nTries=nTries,
gpsAccuracy=gpsAccuracy, gpsAccuracyField=gpsAccuracyField, accuracyLevel=accuracyLevel,
subsetByProb=subsetByProb)
# setnames(pointCloud_list$gtRemSens_dt, old=c("gtSampleID", "gtPatch", "remSensPatch"), new=c(gtSampleID, gtPatch, remSensPatch))
# pointCloud_list$gtRemSens <- st_as_sf(pointCloud_list$gtRemSens_dt)
if(weightedModel==TRUE){
joined_dt <- data.table(pointCloud_list$gtRemSens)
uniqueMatches <- joined_dt[!is.na(remSensPatch) & !is.na(gtPatch), mean(prob), by=list(gtSampleID, gtPatch, remSensPatch), env=dtEnv]
mn_weighted <- quiet(multinom(reformulate(termlabels=remSensPatch, response=gtPatch), weights=V1, uniqueMatches), warning=FALSE)
# mn_weighted <- weightedAccuracy(joined=joined_dt, gtSampleID=gtSampleID, gtPatch=gtPatch,
#                                 remSensPatch=remSensPatch, prob="prob",
#                                 gtPatches=gtPatchTypes)
#calculate mean classification accuracy
weightedProbs <- predict(mn_weighted, mn_weighted$xlevels, type="probs")
dimnames(weightedProbs)[[1]] <- paste0("classified_as_", mn_weighted$xlevels[[1]])
dimnames(weightedProbs)[[2]] <- paste0("prob_", dimnames(weightedProbs)[[2]])
probMats <- drawMultinomProbs(mn_weighted, nDraws=nReclass)
} else {
joined_dt <- data.table(pointCloud_list$gtRemSens)
#build dataset to pull reclass data from
if(nReclass > nDraws){
sampledDraws <- sample(1:nDraws, nReclass, replace=TRUE)
gtRemSens_dt <- vector("list", length=nReclass)
for(i in 1:nReclass){
gtRemSens_dt[[i]] <- joined_dt[drawID==sampledDraws[i], ]
gtRemSens_dt[[i]][, reClassID := i][]
}
gtRemSens_dt <- do.call('rbind', gtRemSens_dt)
} else {
sampledDraws <- sample(1:nDraws, nReclass, replace=FALSE)
gtRemSens_dt <- joined_dt[drawID %in% sampledDraws]
gtRemSens_dt[, reClassID := which(sampledDraws==drawID), by=1:nrow(gtRemSens_dt)][]
}
#conduct multinomial analysis for each draw id and estimate prob. of mis-classifying for each patch type
probMats <- vector("list", length=nReclass)
for(i in 1:nReclass){
mn <- gtRemSens_dt[reClassID==i & overlap==1 & !is.na(remSensPatch), quiet(multinom(gtPatch~remSensPatch), warning=FALSE), env=dtEnv]
probMats[[i]] <- drawMultinomProbs(mn, nDraws=1)
}
#convert gtRemSens_dt back to shapefile for output
gtRemSens <- st_as_sf(gtRemSens_dt)
}
#end if matchMethod=="randomPoints"
} else { #matchMethod=="bufferedSubset"
bufferedSubset <- bufferSubset(gtShp=gtShp, remSensShp=remSensShp, gtSampleID=gtSampleID, remSensSampleID=remSensSampleID, remSensPatch=remSensPatch,
gpsAccuracy=gpsAccuracy, gpsAccuracyField=gpsAccuracyField, proportionOverlap=proportionOverlap)
#propagate uncertainty
mn <- quiet(multinom(reformulate(termlabels=remSensPatch, response=gtPatch), bufferedSubset), warning=FALSE)
meanProbs <- predict(mn, mn$xlevels, type="probs")
dimnames(meanProbs)[[1]] <- paste0("classified_as_", mn$xlevels[[1]])
dimnames(meanProbs)[[2]] <- paste0("prob_", dimnames(meanProbs)[[2]])
probMats <- drawMultinomProbs(mn, nDraws=nReclass)
}
#end matchMethod=="bufferedSubset"
fullMat <- vector("logical", length=nReclass)
#check that probability matrix rows match remSens patch levels, columns match gt patch levels observed, all rows sum to 1, and that all probabilities are between 0 and 1
for(i in 1:nReclass){
if(isTRUE(all.equal(gsub("prob_", "", colnames(probMats[[i]])), gtPatchTypes)) &
isTRUE(all.equal(gsub("classified_as_", "", rownames(probMats[[i]])), remSensPatchTypes)) &
isTRUE(mean(apply(probMats[[i]], 1, sum))==1) &
isTRUE(mean(between(probMats[[i]], 0, 1))==1)){
fullMat[i] <- TRUE
} else {
fullMat[i] <- FALSE
}
}
remSens_dt <- data.table(remSensShp)
remSensPropUncert <- remSens_dt[rep(1:nrow(remSens_dt), nReclass)]
remSensPropUncert[, reClassID := seq_along(remSensPatch), by=remSensSampleID, env=dtEnv][]
if(matchMethod=="randomPoints" & weightedModel==FALSE){
remSensPropUncert <- merge(remSensPropUncert, unique(gtRemSens_dt[, .(reClassID, drawID), env=dtEnv]), by="reClassID")
} else { #matchMethod=="bufferedSubset" or weightedModel==TRUE
remSensPropUncert[, drawID := 1][]
}
remSensPropUncert[, rowID := seq_along(drawID)][]
#randomly assign new class from multinomial distribution based on calculated accuracy
remSensPropUncert[, drawnClassID := numeric()][]
remSensPropUncert[!is.na(remSensPatch) & reClassID %in% which(fullMat==TRUE), drawnClassID := drawClass(classProps=probMats, assignedClass=as.numeric(remSensPatch), index=reClassID), by=rowID, env=dtEnv][]
remSensPropUncert[, drawnClass := gtPatchTypes[drawnClassID]][]
#drop rowID column, since it is no longer needed
remSensPropUncert[, rowID := NULL][]
if(matchMethod=="randomPoints"){
if(weightedModel==TRUE){
return(list(gtRemSens=pointCloud_list$gtRemSens,
withinProbs=pointCloud_list$withinProbs,
remSensPropUncert=remSensPropUncert,
probMats=probMats,
fullMat=fullMat,
weightedProbs=weightedProbs))
} else {
return(list(gtRemSens=gtRemSens,
withinProbs=pointCloud_list$withinProbs,
remSensPropUncert=remSensPropUncert,
probMats=probMats,
fullMat=fullMat))
}
} else { #matchMethod=="bufferedSubset"
return(list(gtRemSens=bufferedSubset,
remSensPropUncert=remSensPropUncert,
probMats=probMats,
fullMat=fullMat,
meanProbs=meanProbs))
}
}
propUncert_subset <- classificationAccuracy_propagateUncertainty(
gtShp = point_layer,
remSensShp = polygon_layer,
matchMethod="randomPoints",
gtSampleID="unique_id2",
gtPatch="Substrate", # Keep this for point_layer
remSensSampleID="unique_id",
remSensPatch="Substrate_est", # Adjusted for polygon_layer
nDraws = 20,
nReclass=10,
gpsAccuracy=5,
weightedModel=F
)
propUncert_subset
names(point_layer)
names(polygon_layer)
names(polygon_layer)[!names(polygon_layer=="geometry")]
names(polygon_layer)[!names(polygon_layer)=="geometry"]
loadPkg()
propUncert_subset <- classificationAccuracy_propagateUncertainty(
gtShp = point_layer,
remSensShp = polygon_layer,
matchMethod="randomPoints",
gtSampleID="unique_id2",
gtPatch="Substrate", # Keep this for point_layer
remSensSampleID="unique_id",
remSensPatch="Substrate_est", # Adjusted for polygon_layer
nDraws = 20,
nReclass=10,
gpsAccuracy=5,
weightedModel=F
)
loadPkg()
propUncert_subset <- classificationAccuracy_propagateUncertainty(
gtShp = point_layer,
remSensShp = polygon_layer,
matchMethod="randomPoints",
gtSampleID="unique_id2",
gtPatch="Substrate", # Keep this for point_layer
remSensSampleID="unique_id",
remSensPatch="Substrate_est", # Adjusted for polygon_layer
nDraws = 20,
nReclass=10,
gpsAccuracy=5,
weightedModel=F
)
loadPkg()
propUncert_subset <- classificationAccuracy_propagateUncertainty(
gtShp = point_layer,
remSensShp = polygon_layer,
matchMethod="bufferedSubset",
gtSampleID="unique_id2",
gtPatch="Substrate", # Keep this for point_layer
remSensSampleID="unique_id",
remSensPatch="Substrate_est", # Adjusted for polygon_layer
#nDraws = 100,
nReclass=10,
gpsAccuracy=3,
weightedModel=TRUE
)
loadPkg()
propUncert_subset <- classificationAccuracy_propagateUncertainty(
gtShp = point_layer,
remSensShp = polygon_layer,
matchMethod="bufferedSubset",
gtSampleID="unique_id2",
gtPatch="Substrate", # Keep this for point_layer
remSensSampleID="unique_id",
remSensPatch="Substrate_est", # Adjusted for polygon_layer
#nDraws = 100,
nReclass=10,
gpsAccuracy=3,
weightedModel=TRUE
)
loadPkg()
propUncert_subset <- classificationAccuracy_propagateUncertainty(
gtShp = point_layer,
remSensShp = polygon_layer,
matchMethod="bufferedSubset",
gtSampleID="unique_id2",
gtPatch="Substrate", # Keep this for point_layer
remSensSampleID="unique_id",
remSensPatch="Substrate_est", # Adjusted for polygon_layer
#nDraws = 100,
nReclass=10,
gpsAccuracy=3,
weightedModel=TRUE
)
loadPkg()
propUncert_subset <- classificationAccuracy_propagateUncertainty(
gtShp = point_layer,
remSensShp = polygon_layer,
matchMethod="bufferedSubset",
gtSampleID="unique_id2",
gtPatch="Substrate", # Keep this for point_layer
remSensSampleID="unique_id",
remSensPatch="Substrate_est", # Adjusted for polygon_layer
#nDraws = 100,
nReclass=10,
gpsAccuracy=3,
weightedModel=TRUE
)
loadPkg()
propUncert_subset <- classificationAccuracy_propagateUncertainty(
gtShp = point_layer,
remSensShp = polygon_layer,
matchMethod="bufferedSubset",
gtSampleID="unique_id2",
gtPatch="Substrate", # Keep this for point_layer
remSensSampleID="unique_id",
remSensPatch="Substrate_est", # Adjusted for polygon_layer
#nDraws = 100,
nReclass=10,
gpsAccuracy=3,
weightedModel=TRUE
)
gtShp
remSensShp
loadPkg()
propUncert_subset <- classificationAccuracy_propagateUncertainty(
gtShp = point_layer,
remSensShp = polygon_layer,
matchMethod="bufferedSubset",
gtSampleID="unique_id2",
gtPatch="Substrate", # Keep this for point_layer
remSensSampleID="unique_id",
remSensPatch="Substrate_est", # Adjusted for polygon_layer
#nDraws = 100,
nReclass=10,
gpsAccuracy=3,
weightedModel=TRUE
)
loadPkg()
propUncert_subset <- classificationAccuracy_propagateUncertainty(
gtShp = point_layer,
remSensShp = polygon_layer,
matchMethod="bufferedSubset",
gtSampleID="unique_id2",
gtPatch="Substrate", # Keep this for point_layer
remSensSampleID="unique_id",
remSensPatch="Substrate_est", # Adjusted for polygon_layer
#nDraws = 100,
nReclass=10,
gpsAccuracy=3,
weightedModel=TRUE
)
loadPkg()
propUncert_subset <- classificationAccuracy_propagateUncertainty(
gtShp = point_layer,
remSensShp = polygon_layer,
matchMethod="randomPoints",
gtSampleID="unique_id2",
gtPatch="Substrate", # Keep this for point_layer
remSensSampleID="unique_id",
remSensPatch="Substrate_est", # Adjusted for polygon_layer
nDraws = 20,
nReclass=10,
gpsAccuracy=5,
weightedModel=F
)
loadPkg()
propUncert_subset <- classificationAccuracy_propagateUncertainty(
gtShp = point_layer,
remSensShp = polygon_layer,
matchMethod="randomPoints",
gtSampleID="unique_id2",
gtPatch="Substrate", # Keep this for point_layer
remSensSampleID="unique_id",
remSensPatch="Substrate_est", # Adjusted for polygon_layer
nDraws = 20,
nReclass=10,
gpsAccuracy=5,
weightedModel=F
)
loadPkg()
propUncert_subset <- classificationAccuracy_propagateUncertainty(
gtShp = point_layer,
remSensShp = polygon_layer,
matchMethod="randomPoints",
gtSampleID="unique_id2",
gtPatch="Substrate", # Keep this for point_layer
remSensSampleID="unique_id",
remSensPatch="Substrate_est", # Adjusted for polygon_layer
nDraws = 20,
nReclass=10,
gpsAccuracy=5,
weightedModel=F
)
loadPkg()
propUncert_subset <- classificationAccuracy_propagateUncertainty(
gtShp = point_layer,
remSensShp = polygon_layer,
matchMethod="randomPoints",
gtSampleID="unique_id2",
gtPatch="Substrate", # Keep this for point_layer
remSensSampleID="unique_id",
remSensPatch="Substrate_est", # Adjusted for polygon_layer
nDraws = 20,
nReclass=10,
gpsAccuracy=5,
weightedModel=F
)
loadPkg()
propUncert_subset <- classificationAccuracy_propagateUncertainty(
gtShp = point_layer,
remSensShp = polygon_layer,
matchMethod="randomPoints",
gtSampleID="unique_id2",
gtPatch="Substrate", # Keep this for point_layer
remSensSampleID="unique_id",
remSensPatch="Substrate_est", # Adjusted for polygon_layer
nDraws = 20,
nReclass=10,
gpsAccuracy=5,
weightedModel=F
)
loadPkg()
propUncert_subset <- classificationAccuracy_propagateUncertainty(
gtShp = point_layer,
remSensShp = polygon_layer,
matchMethod="randomPoints",
gtSampleID="unique_id2",
gtPatch="Substrate", # Keep this for point_layer
remSensSampleID="unique_id",
remSensPatch="Substrate_est", # Adjusted for polygon_layer
nDraws = 20,
nReclass=10,
gpsAccuracy=5,
weightedModel=F
)
warnings()
loadPkg()
propUncert_subset <- classificationAccuracy_propagateUncertainty(
gtShp = point_layer,
remSensShp = polygon_layer,
matchMethod="randomPoints",
gtSampleID="unique_id2",
gtPatch="Substrate", # Keep this for point_layer
remSensSampleID="unique_id",
remSensPatch="Substrate_est", # Adjusted for polygon_layer
nDraws = 20,
nReclass=10,
gpsAccuracy=5,
weightedModel=F
)
propUncert_subset <- classificationAccuracy_propagateUncertainty(
gtShp = point_layer,
remSensShp = polygon_layer,
matchMethod="randomPoints",
gtSampleID="unique_id2",
gtPatch="Substrate", # Keep this for point_layer
remSensSampleID="unique_id",
remSensPatch="Substrate_est", # Adjusted for polygon_layer
nDraws = 20,
nReclass=1001,
gpsAccuracy=5,
weightedModel=F
)
data(substrateLayers)
data("substrateLayers")
data("groundTruther::substrateLayers")
library(groundTruther)
data("substrateLayers")
?substrateLayers
?data
help("substrateLayers")
help(substrateLayers)
substrateLayers
help(substrateLayers.rda)
data(substrateLayers)
help(substrateLayers)
library(utils)
help("USArrests")
help("substrateLayers")
devtools::install()
help(substrateLayers)
help(groundTruther::substrateLayers)
data(substrateLayers)
library(groundTruther)
help(substrateLayers)
?data
data("substrateLayers")
help(substrateLayers)
substrateLayers
?devtools::install
help(diamonds)
setwd("C:/Users/jlfischer/OneDrive - DOI/Desktop/myDocs/GitHub/groundTruther/R")
devtools::install(build_vignettes = TRUE)
substrateLayers
data("substrateLayers")
library(groundTruther)
data("substrateLayers")
help(substrateLayers)
??substrateLayers
setwd("C:/Users/jlfischer/OneDrive - DOI/Desktop/myDocs/GitHub/groundTruther/R")
devtools::install(build_vignettes = TRUE)
library(groundTruther)
data("substrateLayers")
help(substrateLayers)
help("substrateLayers")
substrateLayers
help(groundTruther)
?groundTruther
help("groundTruther")
help(ggplot2)
devtools::document()
setwd("C:/Users/jlfischer/OneDrive - DOI/Desktop/myDocs/GitHub/groundTruther/R")
devtools::install(build_vignettes = TRUE)
data("substrateLayers")
library(groundTruther)
data("substrateLayers")
help(substrateLayers)
help(diamonds)
help(groundTruther)
help("groundTruther")
help("ggplot2")
?classificationAccuracy_propagateUncertainty
devtools::document()
devtools::install(build_vignettes = TRUE)
library(groundTruther)
data("substrateLayers")
help(substrateLayers)
setwd("C:/Users/jlfischer/OneDrive - DOI/Desktop/myDocs/GitHub/groundTruther/R")
use_package_doc()
devtools::use_package_doc()
??use_package_doc
usethis::use_package_doc()
devtools::document()
devtools::install(build_vignettes = TRUE)
library(groundTruther)
data("substrateLayers")
help(substrateLayers)
help("groundTruther")
?usethis::use_package_doc()
help("ggplot2")
help("ggplot2-package")
setwd("C:/Users/jlfischer/OneDrive - DOI/Desktop/myDocs/GitHub/groundTruther/R")
devtools::document()
devtools::load_all()
help(substrateLayers)
devtools::document()
devtools::load_all()
help(substrateLayers)
devtools::document()
devtools::load_all()
help(substrateLayers)
devtools::document()
devtools::load_all()
devtools::document()
devtools::load_all()
help(substrateLayers)
devtools::document()
devtools::load_all()
help(substrateLayers)
devtools::document()
devtools::load_all()
help(substrateLayers)
devtools::document()
devtools::load_all()
help(substrateLayers)
devtools::document()
devtools::load_all()
help(substrateLayers)
devtools::document()
devtools::load_all()
help(substrateLayers)
devtools::document()
devtools::load_all()
help(substrateLayers)
devtools::document()
devtools::load_all()
devtools::install(build_vignettes = TRUE)
devtools::install(build_vignettes = TRUE)
1500/8738
1500/8000
help(substrateLayers)
library(groundTruther)
help(substrateLayers)
